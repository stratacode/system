<% // This template gets merged into each persisted type - those with @DBTypeSettings on the type or layer for a provider that needs a the type descriptor
   if (dbTypeDescriptor != null) { %>

   public static sc.db.DBTypeDescriptor getDBTypeDescriptor() {
      return sc.db.DBTypeDescriptor.getByType(<%= typeIsDynamic ? "sc.dyn.DynUtil.findType(\"" + typeName + "\")" : typeBaseName + ".class" %>, true);
   }

   public static <%= typeBaseName %> findById(<%= formatIdParams(false) %>) {
      return (<%= typeBaseName %>) getDBTypeDescriptor().findById(<%= formatIdParams(true) %>);
   }

   @sc.obj.Constant
   @sc.obj.Sync(syncMode=sc.obj.SyncMode.Disabled)
   public static sc.db.DBTypeDescriptor dbTypeDesc;

   public <%= typeBaseName %>() {
      <% if (dbTypeDescriptor.baseType == null) { %>
      _dbObject = new sc.db.DBObject(this);
      _dbObject.init();
      <% } else { %>
      super();
      <% } %>
   }
   public <%= typeBaseName %>(sc.db.DBObject _dbObj) {
      <% if (dbTypeDescriptor.baseType == null) { %>
       _dbObject = _dbObj;
       _dbObject.wrapper = this;
       _dbObject.init();
   <% } else { %>
        super(_dbObj);
   <% } %>
   }

   <%= formatQueries() %>

   <%    if (dbTypeDescriptor.baseType == null) { %>

      @sc.obj.Sync(syncMode=sc.obj.SyncMode.Disabled)
      // Stores persistent state for the instance
      protected transient sc.db.DBObject _dbObject;

      public void dbInsert(boolean queue) {
         _dbObject.dbInsert(queue);
      }
      public void dbDelete(boolean queue) {
         _dbObject.dbDelete(queue);
      }
      public int dbUpdate() {
         return _dbObject.dbUpdate();
      }
      public Map<String,String> dbValidate() {
         return _dbObject.dbValidate();
      }
      public boolean dbRefresh() {
         return _dbObject.dbRefresh();
      }
      public sc.db.DBObject getDBObject() {
         return _dbObject;
      }
      public String getObjectId() {
         return _dbObject.getObjectId();
      }
      public Object getDBId() {
         return _dbObject.getDBId();
      }
      public void stop() {
         _dbObject.stop();
      }
   <%    }
         if (dbTypeDescriptor.needsAutoId) { %>
      @sc.bind.Bindable(manual=true)
      @sc.db.IdSettings(generated=true) // Generated id
      long id;
   <%    }
   }

%>
