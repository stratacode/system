<% // This template gets merged into each persisted type - those with @DBTypeSettings on the type or layer for a provider that needs a the type descriptor
   if (dbTypeDescriptor != null) { %>

   public static <%= typeBaseName %> findById(<%= formatIdParams(false) %>) {
      return (<%= typeBaseName %>) sc.db.DBTypeDescriptor.getByType(<%= typeIsDynamic ? "sc.dyn.DynUtil.findType(\"" + typeName + "\")" : typeBaseName + ".class" %>, true).findById(<%= formatIdParams(true) %>);
   }

   public static sc.db.DBTypeDescriptor dbTypeDesc;

   <%= formatFindByQueries() %>

   <%    if (dbTypeDescriptor.baseType == null) { %>
      // Stores persistent state for the instance
      protected sc.db.DBObject _dbObject = new sc.db.DBObject(this);
      {
         _dbObject.init();
      }

      public void dbInsert() {
         _dbObject.dbInsert();
      }
      public void dbDelete() {
         _dbObject.dbDelete();
      }
      public int dbUpdate() {
         return _dbObject.dbUpdate();
      }
      public boolean dbRefresh() {
         return _dbObject.dbRefresh();
      }
      public sc.db.DBObject getDBObject() {
         return _dbObject;
      }
      public String getObjectId() {
         return _dbObject.getObjectId();
      }
      public Object getDBId() {
         return _dbObject.getDBId();
      }
      public void stop() {
         _dbObject.stop();
      }
   <%    }
         if (dbTypeDescriptor.needsAutoId) { %>
      @sc.db.IdSettings // Generated id
      long id;
   <%    }
   }

%>
