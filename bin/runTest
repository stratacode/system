#!/bin/bash

TEST_NAME=$1
if [ "${TEST_NAME}" == "" ] ; then
   echo "Error: test name expected as first argument to: runTest <testName> [--input stdin file] [other test options] commands to run in test"
   exit -1
fi
shift

if [ -z "$RESULTS_DIR" ] ; then
   # Being run directly from command line
   if [ -z "TEST_HOME" ] ; then
      if [ -z "$BASH_SOURCE" ] ; then 
         echo "No default source for tests - must set TEST_HOME environment variable to path to test scripts"
         exit -1
      fi
   fi
   TEST_HOME=${TEST_HOME:-`dirname $BASH_SOURCE`}

   if [ ! -f $TEST_HOME/testEnv ] ; then
      echo "No testEnv file in TEST_HOME: $TEST_HOME"
      exit -1
   fi

   source $TEST_HOME/testEnv

   ARGS=("${SCRIPTS[@]}")
   INTERACTIVE=1
else
   # Being run from runTests so args have not been parsed yet
   ARGS=()
   while [[ $# -gt 0 ]]
   do
      case $1 in
          --input)
          INPUT_FILE="$2"
          INPUT_FILE_REDIR=" < $2"
          shift 
          shift 
          ;;
          --ignore)
          IGNORE_ERRORS=1
          shift
          ;;
          *)
          ARGS+=("$1") 
          shift
          ;;
      esac
   done
fi

if [ "${#ARGS[@]}" == "0" ] ; then
   echo "No arguments supplied to runTest: $TEST_NAME"
   exit -1
fi

OUT_DIR="$RUN_DIR/$TEST_NAME"
OUT_FILE="$OUT_DIR/out"
STATUS_FILE="$OUT_DIR/status"
CMD_FILE="$OUT_DIR/cmd"
DIFF_FILE="$OUT_DIR/diff"
VALID_DIR="$VALID_RESULTS/$TEST_NAME"
VALID_FILE="$VALID_DIR/out"
VALID_STATUS_FILE="$VALID_DIR/status"

CMD=${ARGS[*]}
if [ ! -d "$OUT_DIR" ] ; then
   mkdir -p "$OUT_DIR"
else
   echo "Error test output directory: $OUT_DIR already exists.  Duplicate test name: $TEST_NAME in script: $SCRIPT"
   exit -1
fi

if [ ! -d "$VALID_DIR" ] ; then
   echo "Warning: new test found: $TEST_NAME - creating new directory to store valid results: $VALID_DIR"
   mkdir -p "$VALID_DIR"
fi

echo "--- Running test $TEST_NAME: ${CMD}${INPUT_FILE_REDIR} > $OUT_FILE"
echo "$TEST_NAME" >> "${RUN_DIR}/testsRun"
touch "${RUN_DIR}/passed"
if [ "$ECHO_OUTPUT" = "1" ] ; then
   if [ ! -z "$INPUT_FILE" ] ; then
      $CMD 2>&1 < "$INPUT_FILE" | tee "$OUT_FILE" 
   else
      $CMD 2>&1 | tee "$OUT_FILE" 
   fi
else
   if [ ! -z "$INPUT_FILE" ] ; then
      $CMD 2>&1 < "$INPUT_FILE" &> "$OUT_FILE" 
   else
      $CMD 2>&1 &> "$OUT_FILE" 
   fi
fi

STATUS="$?"
if [ "$STATUS" = 130 ] ; then
   echo "Test $TEST_NAME interrupted"
   exit 130
fi

if [ $STATUS != 0 ] ; then
    echo "Warning: test exited with status: $STATUS"
fi
echo "$STATUS" > "$STATUS_FILE"

if [ -z "$INPUT_FILE" ] ; then
   echo "$CMD" > "$CMD_FILE"
else
   echo "$CMD < $INPUT_FILE" > "$CMD_FILE"
fi

SUCCESS=0
if [ -f "$VALID_FILE" ] ; then 
   if diff "$OUT_FILE" "$VALID_FILE" > /dev/null ; then 
      if diff "$STATUS_FILE" "$VALID_STATUS_FILE" > /dev/null ; then 
         echo "- Success: $TEST_NAME"
         SUCCESS=1
         echo "$TEST_NAME" >> "${RUN_DIR}/passed"
      else
         echo "Test exit status changed: $TEST_NAME - diff $STATUS_FILE $VALID_STATUS_FILE"
         echo "$TEST_NAME" >> "${RUN_DIR}/failed"
         echo "$TEST_NAME - status: diff $STATUS_FILE $VALID_STATUS_FILE" >> "${RUN_DIR}/failedDetail"
         if [ "$ECHO_ERRORS" = "1" ] ; then
            diff "$STATUS_FILE" "$VALID_STATUS_FILE" 
         fi
      fi
   elif [ "$IGNORE_ERRORS" == 0 ] ; then
      echo "*** Fail: $TEST_NAME - diff $OUT_FILE $VALID_FILE"
      echo "$TEST_NAME" >> "${RUN_DIR}/failed"
      echo "$TEST_NAME - diff $OUT_FILE $VALID_FILE" >> ${RUN_DIR}/failedDetail
      diff "$OUT_FILE" "$VALID_FILE" > "$DIFF_FILE"
      if [ "$ECHO_ERRORS" = "1" ] ; then
         diff "$STATUS_FILE" "$VALID_STATUS_FILE"
         diff "$OUT_FILE" "$VALID_FILE" 
      fi
   else
      echo "Ignored output for: $TEST_NAME"
      echo "$TEST_NAME" >> "${RUN_DIR}/ignored"
   fi
else
   echo "First run for: $TEST_NAME stored in $OUT_FILE"
   echo "$TEST_NAME - $OUT_FILE" >> "${RUN_DIR}/new"
   if [ "$ECHO_ERRORS" = "1" ] ; then
      cat "$OUT_FILE"
   fi
fi

if [[ "$SUCCESS" = 0 && "$INTERACTIVE" = 1 ]] ; then
   acceptYN=""
   while [[ "$acceptYN" != "y" && "$acceptYN" != "n" ]] ; 
   do
      read -p "Accept new output? [yn] " acceptYN
      if [[ ! "$acceptYN" =~ [yn] ]] ; then
          echo "Invalid: $acceptYN - enter y or n"
      fi
   done
   if [ "$acceptYN" = "y" ] ; then
      cp "$OUT_FILE" "$VALID_FILE"
      cp "$STATUS_FILE" "$VALID_STATUS_FILE"
      cp "$CMD_FILE" "$VALID_CMD_FILE"
      echo "Accepted new output file $OUT_FILE as valid: $VALID_FILE"
   else
      echo "Did not accept $OUT_FILE - valid file remains: $VALID_FILE"
   fi
fi
