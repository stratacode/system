#!/bin/bash

TEST_NAME=$1
if [ "${TEST_NAME}" == "" ] ; then
   echo "Error: test name expected as first argument to: runTest <testName> [--input stdin file] [other test options] commands to run in test"
   exit -1
fi
shift

if [ -z "$RESULTS_DIR" ] ; then
   # Being run directly from command line
   if [ -z "TEST_HOME" ] ; then
      if [ -z "$BASH_SOURCE" ] ; then 
         echo "No default source for tests - must set TEST_HOME environment variable to path to test scripts"
         exit -1
      fi
   fi
   TEST_HOME=${TEST_HOME:-`dirname $BASH_SOURCE`}

   if [ ! -f $TEST_HOME/testEnv ] ; then
      echo "No testEnv file in TEST_HOME: $TEST_HOME"
      exit -1
   fi

   source $TEST_HOME/testEnv

   ARGS=("${SCRIPTS[@]}")
   INTERACTIVE=1
else
   # Being run from runTests so args have not been parsed yet
   ARGS=()
   while [[ $# -gt 0 ]]
   do
      case $1 in
          --input)
          INPUT_FILE="$2"
          INPUT_FILE_REDIR=" < $2"
          shift 
          shift 
          ;;
          --ignore)
          IGNORE_ERRORS=1
          shift
          ;;
          *)
          ARGS+=("$1") 
          shift
          ;;
      esac
   done
fi

if [ "$SHOW_WINDOW" = "1" ] ; then
  echo "Environment: SHOW_WINDOW set to 1"
  ARGS+=" -sw"
fi

if [ "${#ARGS[@]}" == "0" ] ; then
   echo "No arguments supplied to runTest: $TEST_NAME"
   exit -1
fi

TEST_DIR="$RUN_DIR/$TEST_NAME"

OUT_FILE="$TEST_DIR/outf"
OUTP_FILE="$TEST_DIR/out"
STATUS_FILE="$TEST_DIR/status"
CMD_FILE="$TEST_DIR/cmd"
DIFF_FILE="$TEST_DIR/diff"
PAGESP="$TEST_DIR/pages"
PAGES="$TEST_DIR/pagesf"

VALID_DIR="$VALID_RESULTS/$TEST_NAME"
VALID_FILE="$VALID_DIR/out"
VALID_STATUS_FILE="$VALID_DIR/status"
VALID_PAGES="$VALID_DIR/pages"

CMD=${ARGS[*]}
if [ ! -d "$TEST_DIR" ] ; then
   mkdir -p "$TEST_DIR"
else
   echo "Error test output directory: $TEST_DIR already exists.  Duplicate test name: $TEST_NAME in script: $SCRIPT"
   exit -1
fi

if [ ! -d "$VALID_DIR" ] ; then
   echo "*** Running new test: $TEST_NAME"
   mkdir -p "$VALID_DIR"
fi

echo "--- Running test $TEST_NAME: ${CMD}${INPUT_FILE_REDIR} > $OUTP_FILE"
echo "$TEST_NAME" >> "${RUN_DIR}/testsRun"
touch "${RUN_DIR}/passed"
if [ "$ECHO_OUTPUT" = "1" ] ; then
   echo "Environment: ECHO_OUTPUT set to 1"
   if [ ! -z "$INPUT_FILE" ] ; then
      $CMD 2>&1 < "$INPUT_FILE" | tee "$OUTP_FILE" 
   else
      $CMD 2>&1 | tee "$OUTP_FILE" 
   fi
else
   if [ ! -z "$INPUT_FILE" ] ; then
      $CMD 2>&1 < "$INPUT_FILE" &> "$OUTP_FILE" 
   else
      $CMD 2>&1 &> "$OUTP_FILE" 
   fi
fi

STATUS="$?"
if [ "$STATUS" = 130 ] ; then
   echo "Test $TEST_NAME interrupted"
   exit 130
fi
if [ $STATUS != 0 ] ; then
    echo "Warning: test exited with status: $STATUS"
fi
echo "$STATUS" > "$STATUS_FILE"

if [ -f "$OUTP_FILE" ] ; then
   scc -q -ni sctest.logFilter < "$OUTP_FILE" > "$OUT_FILE"
   echo "Filtered: `diff "$OUTP_FILE" "$OUT_FILE" | wc -l` output lines"
fi

if [ -d "$PAGESP" ] ; then
   mkdir "$PAGES"
   ALL_PAGES=`(cd $PAGESP; find . -type f -print)`
   for PAGE_FILE in `echo $ALL_PAGES` 
   do
      PAGEP_FILE="${PAGESP}/${PAGE_FILE}"
      PAGE_FILE="${PAGES}/${PAGE_FILE}"
      mkdir -p `dirname "$PAGE_FILE"`
      scc -q -ni sctest.logFilter < "$PAGEP_FILE" > "$PAGE_FILE"
      echo "Filtered: `diff "$PAGEP_FILE" "$PAGE_FILE" | wc -l` page: $PAGE_FILE lines"
   done
fi

if [ -z "$INPUT_FILE" ] ; then
   echo "$CMD" > "$CMD_FILE"
else
   echo "$CMD < $INPUT_FILE" > "$CMD_FILE"
fi

SUCCESS=0
if [ -f "$VALID_FILE" ] ; then 
   pagesChanged=1
   outputChanged=1
   statusChanged=1
   if [[ ! -d "$VALID_PAGES" ]] || diff -r "$VALID_PAGES" "$PAGES" > /dev/null ; then 
      pagesChanged=0
   fi
   if diff "$VALID_FILE" "$OUT_FILE" > /dev/null ; then 
      outputChanged=0
   fi
   if diff "$VALID_STATUS_FILE" "$STATUS_FILE" > /dev/null ; then 
      statusChanged=0
   fi
   
   testFailed=0
   if [[ "$outputChanged" = "0" ]] && [[ "$statusChanged" = "0" ]] && [[ "$pagesChanged" = "0" ]] ; then 
      echo "- Success: $TEST_NAME"
      SUCCESS=1
      echo "$TEST_NAME" >> "${RUN_DIR}/passed"
   else
      if [ "$statusChanged" = "1" ] ; then
         echo "*** Exit status changed < valid > new: $TEST_NAME - diff $VALID_STATUS_FILE $STATUS_FILE"
         testFailed=1
         echo "$TEST_NAME - exit status : diff $VALID_STATUS_FILE $STATUS_FILE" >> "${RUN_DIR}/failedDetail"
         if [ "$ECHO_ERRORS" = "1" ] ; then
            diff "$VALID_STATUS_FILE" "$STATUS_FILE" 
         fi
      fi

      if [ "$outputChanged" = "1" ] ; then
         if [ "$IGNORE_ERRORS" == 0 ] ; then
            echo "*** Output changed < valid > new: $TEST_NAME - diff $VALID_FILE $OUT_FILE"
            testFailed=1
            echo "$TEST_NAME - diff $VALID_FILE $OUT_FILE " >> ${RUN_DIR}/failedDetail
            diff "$VALID_FILE" "$OUT_FILE" > "$DIFF_FILE"
            if [ "$ECHO_ERRORS" = "1" ] ; then
               diff "$VALID_STATUS_FILE" "$STATUS_FILE"
               diff "$VALID_FILE" "$OUT_FILE" 
            fi
         else
            echo "Ignored different output for: $TEST_NAME"
            echo "$TEST_NAME" >> "${RUN_DIR}/ignored"
         fi
      fi

      if [ "$pagesChanged" = "1" ] ; then
         echo "*** Pages changed: $TEST_NAME - diff -r $VALID_PAGES $PAGES "
         testFailed=1
         echo "$TEST_NAME - pages: diff -r $VALID_PAGES $PAGES " >> "${RUN_DIR}/failedDetail"
         if [ "$ECHO_ERRORS" = "1" ] ; then
            diff -r "$VALID_PAGES" "$PAGES" 
         fi
      fi
      if [ "$testFailed" = "1" ] ; then
         echo "$TEST_NAME" >> "${RUN_DIR}/failed"
      fi
   fi
else
   echo "First run for: $TEST_NAME stored in $OUT_FILE"
   echo "$TEST_NAME" >> "${RUN_DIR}/new"
   echo "$TEST_NAME - $OUT_FILE" >> "${RUN_DIR}/newDetail"
   if [ "$ECHO_ERRORS" = "1" ] ; then
      echo "--- New test output start:"
      cat "$OUT_FILE"
      echo "- New test output end:"
      if [ -d "$PAGES" ] ; then
          echo "--- Page output starts:"
          cat $PAGES/*
          echo "- Page output ends"
      fi
   fi
fi

if [[ "$SUCCESS" = 0 && "$INTERACTIVE" = 1 ]] ; then
   acceptYN=""
   while [[ "$acceptYN" != "y" && "$acceptYN" != "n" ]] ; 
   do
      read -p "Accept new output? [yn] " acceptYN
      if [[ ! "$acceptYN" =~ [yn] ]] ; then
          echo "Invalid: $acceptYN - enter y or n"
      fi
   done
   if [ "$acceptYN" = "y" ] ; then
      cp "$OUT_FILE" "$VALID_FILE"
      cp "$STATUS_FILE" "$VALID_STATUS_FILE"
      cp "$CMD_FILE" "$VALID_CMD_FILE"
      echo "Updated valid output: $VALID_FILE"
      if [ -d "$PAGES" ] ; then
         if [ -d "$VALID_PAGES" ] ; then
            rm -rf "$VALID_PAGES" 
         fi
         cp -r "$PAGES" "$VALID_PAGES"
         echo "Updated valid pages dir $VALID_PAGES"
      fi
   else
      echo "Did not accept $OUT_FILE - valid file remains: $VALID_FILE"
   fi
fi
