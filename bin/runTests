#!/bin/bash

if [ -z "TEST_HOME" ] ; then
   if [ -z "$BASH_SOURCE" ] ; then 
      echo "No default source for tests - must set TEST_HOME environment variable to path to test scripts"
      exit -1
   fi
fi
TEST_HOME=${TEST_HOME:-`dirname $BASH_SOURCE`}

if [ ! -f $TEST_HOME/testEnv ] ; then
   echo "No testEnv file in TEST_HOME: $TEST_HOME"
   exit -1
fi

source $TEST_HOME/testEnv

echo "Running ${SCRIPTS[*]} in ${SCRIPT_DIR} with results in: ${SC_RESULTS_DIR}/${TEST_RUN_NAME} comparing against: $VALID_RESULTS"

if [ ${#SCRIPTS[@]} == 0 ] ; then
  SCRIPTS=( $(cat $SCRIPT_DIR/allScripts) )
fi

for SCRIPT in "${SCRIPTS[@]}"
do
   FILE="${SCRIPT_DIR}/${SCRIPT}"
   if [ $f $FILE ] ; then
      export SCRIPT
      echo "Running test script: $FILE"
      . "$FILE"
      if [ $? != 0 ] ; then
         if [ "$STOP_ON_ERROR" = "1" ] ; then
            echo "Exiting due to errors running script: $SCRIPT"
            exit 1
         else
            echo "Errors running script: $SCRIPT"
         fi
      fi
   else
      echo "Error - test script not found: $FILE"
      exit 1
   fi
done

if [ -d "$RUN_DIR" ] ; then
   if [ -f "$RUN_DIR/new" ] ; then
      echo "First run tests - `wc -l < $RUN_DIR/new` found:"
      cat "$RUN_DIR/newDetail"

      acceptYN=""
      while [[ "$acceptYN" != "y" && "$acceptYN" != "n" ]] ; 
      do
         read -p "Accept all new output? [yn] " acceptYN
         if [[ ! "$acceptYN" =~ [yn] ]] ; then
             echo "Invalid: $acceptYN - enter y or n"
         fi
      done

      if [ "$acceptYN" = "y" ] ; then 
         newTests=($(cat ${RUN_DIR}/new))

         for newTest in "${newTests[@]}"
         do
            echo "Updating valid file for $newTest"
            TEST_DIR="$RUN_DIR/$newTest"
            VALID_DIR="$VALID_RESULTS/$newTest"
            cp "$TEST_DIR/outf" "$VALID_DIR/out"
            cp "$TEST_DIR/status" "$VALID_DIR/status"
            cp "$TEST_DIR/cmd" "$VALID_DIR/cmd"
         done
      fi

   fi
   if [ -f "$RUN_DIR/failed" ] ; then
      echo "Passed: `wc -l < $RUN_DIR/passed | xargs` Errors: `wc -l < $RUN_DIR/failed | xargs` of total: `wc -l < $RUN_DIR/testsRun | xargs`"
      echo "Failed tests ---- :"
      failIdx=0
      testArray=($(cat ${RUN_DIR}/failed))
      for testName in "${testArray[@]}"
      do
          echo "${failIdx}: ${testName}"
          let failIdx=${failIdx}+1
      done

      testAns=""
      while [[ ! $testAns =~ [qQ] ]] ; 
      do
         read -p "Enter: [h] for help or [qalovd][<i>]: " testAns
         if [[ $testAns =~ [lL] ]] ; then
            newTestArray=($(cat ${RUN_DIR}/failed))
            echo "Failed tests:"
            failIdx=0
            for testName in "${newTestArray[@]}"
            do
                echo "${failIdx}: ${testName}"
                let failIdx=${failIdx}+1
            done
         elif [[ $testAns =~ [oOaAdDvV][0-9]+ ]] ; then
            testIndex=${testAns:1}
            if [[ $testIndex -gt -1 ]] && [[ $testIndex -lt ${#testArray[@]} ]] ; then
               testName=${testArray[${testIndex}]}
               TEST_DIR="$RUN_DIR/$testName"
               VALID_DIR="$VALID_RESULTS/$testName"
               if [[ $testAns =~ [oO][0-9]+ ]] ; then
                  echo "---- ${testName} new cmd:"
                  cat "$TEST_DIR/cmd"
                  echo "---- new output:"
                  cat "$TEST_DIR/outf" 
                  echo "----------"
               elif [[ $testAns =~ [vV][0-9]+ ]] ; then
                  echo "---- ${testName} valid cmd:"
                  cat "$VALID_DIR/cmd"
                  echo "---- valid output:"
                  cat "$VALID_DIR/out" 
                  echo "----------"
               elif [[ $testAns =~ [dD][0-9]+ ]] ; then
                  if ! diff "$TEST_DIR/cmd" "$VALID_DIR/cmd" > /dev/null ; then 
                      echo "---- cmd changed < valid > new:"
                      diff "$VALID_DIR/cmd" "$TEST_DIR/cmd"|| true
                  fi
                  if ! diff "$TEST_DIR/status" "$VALID_DIR/status" > /dev/null ; then 
                      echo "---- exit status changed < valid > new:"
                      diff "$VALID_DIR/status" "$TEST_DIR/status" || true
                  fi
                  if ! diff "$VALID_DIR/out" "$TEST_DIR/outf" > /dev/null ; then 
                      echo "---- output changed < valid > new:"
                      diff "$VALID_DIR/out" "$TEST_DIR/outf"|| true
                  fi
                  if [[ -d "$TEST_DIR/pages" ]] || [[ -d "$VALID_DIR/pages" ]] ; then
                     if ! diff -r "$VALID_DIR/pages" "$TEST_DIR/pagesf" > /dev/null ; then 
                         echo "---- pages changed < valid > new:"
                         diff -r "$VALID_DIR/pages" "$TEST_DIR/pagesf" || true
                     fi
                  fi
                  echo "----------"
               elif [[ $testAns =~ [aA][0-9]+ ]] ; then
                  echo "Accepting new results for $testName"
                  cp "$TEST_DIR/outf" "$VALID_DIR/out"
                  cp "$TEST_DIR/status" "$VALID_DIR/status"
                  cp "$TEST_DIR/cmd" "$VALID_DIR/cmd"
                  if [ -d "$TEST_DIR/pages" ] ; then
                     if [ -d "$VALID_DIR/pages" ] ; then
                        rm -rf "$VALID_DIR/pages" 
                     fi
                     cp -r "$TEST_DIR/pagesf" "$VALID_DIR/pages"
                     echo "Updated valid pages dir $VALID_DIR/pages"
                  elif [ -d "$VALID_DIR/pages" ] ; then
                     rm -rf "$VALID_DIR/pages" 
                     echo "Warning: removed old valid pages dir $VALID_DIR/pages"
                  fi
                  sed "s/^${testName}\$/+${testName}/" < ${RUN_DIR}/failed > ${RUN_DIR}/new-failed
                  mv ${RUN_DIR}/new-failed ${RUN_DIR}/failed
               fi
            else 
               echo "Test index outside of the range 0-${#testArray[@]}"
            fi
         elif [[ $testAns =~ [aA] ]] ; then

            for testName in "${testArray[@]}"
            do
               echo "Updating valid file for $testName"
               TEST_DIR="$RUN_DIR/$testName"
               VALID_DIR="$VALID_RESULTS/$testName"
               cp "$TEST_DIR/outf" "$VALID_DIR/out"
               cp "$TEST_DIR/status" "$VALID_DIR/status"
               cp "$TEST_DIR/cmd" "$VALID_DIR/cmd"
               if [ -d "$TEST_DIR/pages" ] ; then
                  if [ -d "$VALID_DIR/pages" ] ; then
                     rm -rf "$VALID_DIR/pages" 
                  fi
                  cp -r "$TEST_DIR/pagesf" "$VALID_DIR/pages"
                  echo "Updated valid pages dir $VALID_DIR/pages"
               else 
                  rm -rf "$VALID_DIR/pages" 
               fi
            done
         elif [[ $testAns =~ [hH] ]] ; then
            echo "Enter: [q] - quit, [a][<i>] - accept all or one by index"
            echo "       [l] - list, [o]<i> - show test output"
            echo "       [v]<i> show valid output, [d]<i> show diffs"
         elif [[ ! $testAns =~ [qQ] ]] ; then
             echo "Invalid: $testAns - enter [aqlsd][<testIndex>]"
         fi
      done
   elif [ -f "$RUN_DIR/passed" ] ; then 
       echo "All `wc -l < $RUN_DIR/passed | xargs` verified tests passed" 
   fi
   if [ -f "$RUN_DIR/ignored" ] ; then
       echo "Ignored these tests from: ${RUN_DIR}/ignored"
       cat $RUN_DIR/ignored
   fi
else
   echo "Something went wrong - no test run directory: $RUN_DIR"
   exit 1
fi
