#!/bin/sh

# Builds scc using scc. This is the preferred way to build a distribution for tagging and packaging but it's
# easy to build scc from Java as well to build a separate version. 

# Warning: this can fail when a contract has changed that prevents the old version of scc from building the new one.
# In this case, see the --orig option to point to a directory built using Java from IntelliJ or gradle for those cases where a contract
# changes that prevents scc from building a new version of itself.

set -e

STAGEDIR=/tmp/
# directory to use for building with the --orig option - the build using the IDE source to build itself (the value of the -da option when compiling the 'system' layer)
ORIG_DIR=/jjv/vbuild
SCC_CMD=scc

BUILDS_DIR=/usr/local/scc/builds
BUILD_NUM_FILE=~/.stratacode/buildNum.properties 
CLEAN_SC_DIR=/usr/local/cleanScc

SC_DIR=`dirname $BASH_SOURCE[0]`
SC_DIR=`dirname $SC_DIR`

echo "Building StrataCode in $SC_DIR"
cd $SC_DIR

RES_FILE=scc.zip

BP_FILE=${SC_DIR}/buildTag/build.properties
CUR_TAG=`grep tag $BP_FILE | sed 's/tag=//'`
CUR_VERSION=`grep version $BP_FILE | sed 's/version=//'`
CUR_BUILDNUM=`grep scc= $BUILD_NUM_FILE | sed 's/scc=//'`

if [ "$CUR_BUILDNUM" = "" ] ; then
   read -p "Missing current build number from file: $BUILD_NUM_FILE - enter starting build number: [1]:" CUR_BUILDNUM
   mkdir -p `dirname $BUILD_NUM_FILE`
   touch $BUILD_NUM_FILE
   cat >> $BUILD_NUM_FILE <<endbf 
scc=$CUR_BUILDNUM
endbf
fi   

USAGE_MSG="makeSCC [--release] [buildsDir - default is $BUILDS_DIR]"
SCC_ARGS=""

BUILDS_DIR_SET=0

while [[ $# -gt 0 ]]
do
   case $1 in
       --release)
       SCC_ARGS="-Pbuild.tag=release"
       CUR_TAG=release
       shift 
       ;;
       --orig)
       SCC_CMD=$ORIG_DIR/bin/scc
       shift 
       ;;
       *)
       if [ "$BUILDS_DIR_SET" = "1" ] ; then
          echo "Extra argument: $USAGE_MSG" 
          exit 1
       fi
       BUILDS_DIR=$1
       BUILDS_DIR_SET=1
       shift
       ;;
   esac
done

RES_DIR=$BUILDS_DIR/$CUR_TAG/$CUR_VERSION/$CUR_BUILDNUM
LATEST_VERSION=$BUILDS_DIR/$CUR_TAG/$CUR_VERSION/latest
LATEST_TAG=$BUILDS_DIR/$CUR_TAG/latest
BUILD_DIR=$RES_DIR/build
mkdir -p $RES_DIR
mkdir -p $BUILD_DIR

echo "Building scc into: $BUILD_DIR - results in $RES_DIR/$RES_FILE (stagedir: $STAGEDIR)"
# For a clean build you should run this from the source directly, or first build scc, then use it to build itself.
$SCC_CMD -c -a coreRuntime -da $BUILD_DIR
$SCC_CMD -c -a $SCC_ARGS system -da $BUILD_DIR

# Now we package up the STAGEDIR/scc directory.  
rm -rf $STAGEDIR/scc

# old - top level build dir
echo "cp -rf $BUILD_DIR $STAGEDIR/scc"
cp -prf $BUILD_DIR $STAGEDIR/scc

echo "From stagedir: $STAGEDIR"
cd $STAGEDIR
echo "zip $RES_FILE scc/bin/* scc/README.md scc/layers/* scc/bundles/* scc/conf/*"
zip $RES_FILE scc/bin/* scc/README.md scc/layers/* scc/bundles/* scc/conf/*

if [ "$RES_DIR" != "$STAGEDIR" ]; then
   mv $RES_FILE $RES_DIR/
fi

rm -f $LATEST_VERSION $LATEST_TAG
ln -s $RES_DIR $LATEST_VERSION
ln -s $RES_DIR $LATEST_TAG

VERS_FILE=$RES_DIR/build/${RES_FILE%.*}.version

echo "Result file is: $RES_DIR/$RES_FILE" 
echo "$LATEST_TAG" 
#echo "$LATEST_VERSION" 
#echo "version: $VERS_FILE"
cat $VERS_FILE

(cd $CLEAN_SC_DIR; git pull; jar -cf $RES_DIR/scc-src.zip .)
